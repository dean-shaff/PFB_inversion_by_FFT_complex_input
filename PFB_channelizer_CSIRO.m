function PFB_channelizer_CSIRO(Nchan,OS_Nu,OS_De,Nin,Nblocks,fname_in,fname_out)
%
% Takes as input a data file generated by "gen_test_vector.m".
% Assumes one polarization, complex valued single-precision inputs.
% Passes the input through the PFB and stores the output of all channels
% to file.
% The following PFB parameters are selectable:
%     - critically sampled or oversampled
%     - number of PFB channels
%     - oversampling factor
%     - prototype filter response (designed separately and its coefficients
%       provided in a file)
%     - only single block can be processed
%
%
% Author           Date         Comments
% ---------------  -----------  ----------------------------------------
% I. Morrison      31-Jul-2015  Original version
%
% I. Morrison      25-Oct-2015  Complex input version, using CSRIO-provided
%                               core PFB function "polyphase_analysis.m"
%
% ----------------------------------------------------------------------

% Number of channels in filter-bank
L = Nchan;

% OS factor numerator
Nu = OS_Nu;

% PFB type
pfb_type = 1; % 0 for critically sampled, 1 for oversampled

if pfb_type == 0
    OS = 1;
    M = L;
else
    OS = OS_Nu/OS_De;
    M = (L*OS_De)/OS_Nu;
end;
L_M = L - M; % Overlap

% PFB prototype filter
fname_pfb = 'Prototype_FIR.mat';
FiltCoefStruct = load(fname_pfb);
h = FiltCoefStruct.h;

%=======================================

% Open input file
fid_in = fopen(fname_in);

% Open files for writing
for i = 1 : L
    fid_out(i) = fopen(strcat(fname_out,int2str(i),'.dump'), 'w');
end
fid_out_all = fopen(strcat(fname_out, 'all', '.dump'),'w');
fwrite(fid_out_all, char('0'*zeros(4096, 1)), 'char');
% Initialise output
dat_out_per_chan_len = floor((Nin-(L*ceil(length(h)/L)))/M);
y_out = zeros(L,2*dat_out_per_chan_len*Nblocks);


%===============
% Main loop
% Read input blocks and filter

for ii = 1 : Nblocks

    % Print loop number
    fprintf('Loop # %i of %i\n', ii, Nblocks);

    % Read stream of voltages into a single column
    Vstream = single(fread(fid_in, 2*Nin, 'single'));

    if feof(fid_in)
        error('Error - hit end of input file!');
    end;

    % Parse real and imag components
    Vstream = reshape(Vstream, 2, []);
    Vdat = complex(Vstream(1,:), Vstream(2,:));

    % Evaluate the channel outputs
    % out=polyphase_analysis(in,filt,block,step)
    out = polyphase_analysis(Vdat,h,L,M);
    % out(14, :)'.*L
    %Write each output channel's samples to its own file
    s = (ii - 1) * dat_out_per_chan_len * 2 + 1;
    e = ii * dat_out_per_chan_len * 2;
    for i = 1 : L
        % Interleave real/imag, selecting the particular channel
        yy = out(:,i).*L;
        z = [real(yy), imag(yy)];
        dat = reshape(transpose(z),2*dat_out_per_chan_len,1);
        y_out(i,s:e) = dat;
        fwrite(fid_out(i), dat, 'single');
    end;
end;

fclose(fid_in);
for i = 1 : L
    fclose(fid_out(i));
end;
fwrite(fid_out_all, reshape(y_out, L*2*dat_out_per_chan_len*Nblocks, 1),'single');
fclose(fid_out_all)

return
end
